/* Generated By:JavaCC: Do not edit this line. CompiladorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PT_VIRG = 11;
  /** RegularExpression Id. */
  int ATRIB = 12;
  /** RegularExpression Id. */
  int STRING_TYPE = 13;
  /** RegularExpression Id. */
  int INTEGER_TYPE = 14;
  /** RegularExpression Id. */
  int READ = 15;
  /** RegularExpression Id. */
  int PRINT = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int ENTAO = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int ENDIF = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int ENDWHILE = 23;
  /** RegularExpression Id. */
  int IDENT = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int INTEGER = 26;
  /** RegularExpression Id. */
  int DIGIT = 27;
  /** RegularExpression Id. */
  int LETTER = 28;
  /** RegularExpression Id. */
  int MAIS = 29;
  /** RegularExpression Id. */
  int MENOS = 30;
  /** RegularExpression Id. */
  int MULT = 31;
  /** RegularExpression Id. */
  int DIVID = 32;
  /** RegularExpression Id. */
  int POT = 33;
  /** RegularExpression Id. */
  int IGUAL = 34;
  /** RegularExpression Id. */
  int MAIOR_IGUAL = 35;
  /** RegularExpression Id. */
  int MAIOR = 36;
  /** RegularExpression Id. */
  int MENOR = 37;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 38;
  /** RegularExpression Id. */
  int DIFERENTE = 39;
  /** RegularExpression Id. */
  int SC_AND = 40;
  /** RegularExpression Id. */
  int SC_OR = 41;
  /** RegularExpression Id. */
  int NEGACAO = 42;
  /** RegularExpression Id. */
  int CONCAT = 43;
  /** RegularExpression Id. */
  int PAR_E = 44;
  /** RegularExpression Id. */
  int PAR_D = 45;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int comentariomult = 1;
  /** Lexical state. */
  int comentariosimples = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"//\"",
    "<token of kind 9>",
    "<token of kind 10>",
    "\";\"",
    "\":=\"",
    "\"String\"",
    "\"Integer\"",
    "\"read\"",
    "\"print\"",
    "\"if\"",
    "\"entao\"",
    "\"else\"",
    "\"endIf\"",
    "\"while\"",
    "\"do\"",
    "\"endWhile\"",
    "<IDENT>",
    "<STRING>",
    "<INTEGER>",
    "<DIGIT>",
    "<LETTER>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"==\"",
    "\">=\"",
    "\">\"",
    "\"< \"",
    "\"<=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"#\"",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
