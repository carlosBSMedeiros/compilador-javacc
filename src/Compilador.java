/* Generated By:JavaCC: Do not edit this line. Compilador.java */
import java.io.*;

public class Compilador implements CompiladorConstants {
  public static void main(String args []) throws ParseException
  {
    Compilador analisador = null;
    try
    {
      System.out.println(" Inicio Exemplo de c\u00f3digo 01");
      analisador = new Compilador(new FileInputStream("codigos_exemplo/exemplo01.my"));
      analisador.inicio();
      System.out.println(" Fim Exemplo de c\u00f3digo 01");
      System.out.println("\u005cr\u005cn");

          System.out.println(" Inicio Exemplo de c\u00f3digo 02");
      analisador.ReInit(new FileInputStream("codigos_exemplo/exemplo02.my"));
      analisador.inicio();
      System.out.println(" Fim Exemplo de c\u00f3digo 02");
      System.out.println("\u005cr\u005cn");

      System.out.println(" Inicio Exemplo de c\u00f3digo 03");
      analisador.ReInit(new FileInputStream("codigos_exemplo/exemplo03.my"));
      analisador.inicio();
      System.out.println(" Fim Exemplo de c\u00f3digo 03");
      System.out.println("\u005cr\u005cn");

      System.out.println(" Inicio Exemplo de c\u00f3digo 04");
      analisador.ReInit(new FileInputStream("codigos_exemplo/exemplo04.my"));
      analisador.inicio();
      System.out.println(" Fim Exemplo de c\u00f3digo 04");
      System.out.println("\u005cr\u005cn");

      System.out.println(" Inicio Exemplo de c\u00f3digo 05");
      analisador.ReInit(new FileInputStream("codigos_exemplo/exemplo05.my"));
      analisador.inicio();
      System.out.println(" Fim Exemplo de c\u00f3digo 05");
      System.out.println("\u005cr\u005cn");
    }
    catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo nao encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro lexico" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sintatico" + e.getMessage());
    }
  }

  static final public void inicio() throws ParseException {
    trace_call("inicio");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_TYPE:
        case INTEGER_TYPE:
        case READ:
        case PRINT:
        case IF:
        case WHILE:
        case IDENT:
        case STRING:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        linhaComando();
      }
      jj_consume_token(0);
    } finally {
      trace_return("inicio");
    }
  }

  static final public void linhaComando() throws ParseException {
    trace_call("linhaComando");
    try {
      comando();
      jj_consume_token(PT_VIRG);
    } finally {
      trace_return("linhaComando");
    }
  }

  static final public void comando() throws ParseException {
    trace_call("comando");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_TYPE:
      case INTEGER_TYPE:
        declararVar();
        break;
      case IDENT:
        atribuirVar();
        break;
      case PRINT:
        print();
        break;
      case READ:
        read();
        break;
      case STRING:
        concat();
        break;
      case WHILE:
        whileComando();
        break;
      case IF:
        ifComando();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("comando");
    }
  }

  static final public void declararVar() throws ParseException {
    trace_call("declararVar");
    try {
      type();
      atribuirVar();
    } finally {
      trace_return("declararVar");
    }
  }

  static final public void atribuirVar() throws ParseException {
    trace_call("atribuirVar");
    try {
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIB:
        jj_consume_token(ATRIB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          jj_consume_token(STRING);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONCAT:
            concatAtrib();
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          break;
        case IDENT:
        case INTEGER:
        case NEGACAO:
        case PAR_E:
          exp();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONCAT:
            concatAtrib();
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } finally {
      trace_return("atribuirVar");
    }
  }

  static final public void concat() throws ParseException {
    trace_call("concat");
    try {
      jj_consume_token(STRING);
      concatAtrib();
    } finally {
      trace_return("concat");
    }
  }

  static final public void concatAtrib() throws ParseException {
    trace_call("concatAtrib");
    try {
      label_2:
      while (true) {
        jj_consume_token(CONCAT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          jj_consume_token(STRING);
          break;
        case IDENT:
        case INTEGER:
        case NEGACAO:
        case PAR_E:
          exp();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONCAT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
    } finally {
      trace_return("concatAtrib");
    }
  }

  static final public void whileComando() throws ParseException {
    trace_call("whileComando");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PAR_E);
      exp();
      jj_consume_token(PAR_D);
      jj_consume_token(DO);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_TYPE:
        case INTEGER_TYPE:
        case READ:
        case PRINT:
        case IF:
        case WHILE:
        case IDENT:
        case STRING:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        linhaComando();
      }
      jj_consume_token(ENDWHILE);
    } finally {
      trace_return("whileComando");
    }
  }

  static final public void ifComando() throws ParseException {
    trace_call("ifComando");
    try {
      jj_consume_token(IF);
      jj_consume_token(PAR_E);
      exp();
      jj_consume_token(PAR_D);
      jj_consume_token(ENTAO);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_TYPE:
        case INTEGER_TYPE:
        case READ:
        case PRINT:
        case IF:
        case WHILE:
        case IDENT:
        case STRING:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        linhaComando();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_TYPE:
          case INTEGER_TYPE:
          case READ:
          case PRINT:
          case IF:
          case WHILE:
          case IDENT:
          case STRING:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          linhaComando();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(ENDIF);
    } finally {
      trace_return("ifComando");
    }
  }

  static final public void type() throws ParseException {
    trace_call("type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_TYPE:
        jj_consume_token(STRING_TYPE);
        break;
      case INTEGER_TYPE:
        jj_consume_token(INTEGER_TYPE);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type");
    }
  }

  static final public void exp() throws ParseException {
    trace_call("exp");
    try {
      expAnd();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        jj_consume_token(SC_OR);
        expAnd();
      }
    } finally {
      trace_return("exp");
    }
  }

  static final public void expAnd() throws ParseException {
    trace_call("expAnd");
    try {
      expRelac();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        jj_consume_token(SC_AND);
        expRelac();
      }
    } finally {
      trace_return("expAnd");
    }
  }

  static final public void expRelac() throws ParseException {
    trace_call("expRelac");
    try {
      expAdt();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case MAIOR_IGUAL:
        case MAIOR:
        case MENOR:
        case MENOR_IGUAL:
        case DIFERENTE:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
          jj_consume_token(IGUAL);
          expAdt();
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
          expAdt();
          break;
        case MAIOR_IGUAL:
          jj_consume_token(MAIOR_IGUAL);
          expAdt();
          break;
        case MENOR_IGUAL:
          jj_consume_token(MENOR_IGUAL);
          expAdt();
          break;
        case MAIOR:
          jj_consume_token(MAIOR);
          expAdt();
          break;
        case MENOR:
          jj_consume_token(MENOR);
          expAdt();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expRelac");
    }
  }

  static final public void expAdt() throws ParseException {
    trace_call("expAdt");
    try {
      expMult();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
          jj_consume_token(MAIS);
          expMult();
          break;
        case MENOS:
          jj_consume_token(MENOS);
          expMult();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expAdt");
    }
  }

  static final public void expMult() throws ParseException {
    trace_call("expMult");
    try {
      expPotenc();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIVID:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          jj_consume_token(MULT);
          expPotenc();
          break;
        case DIVID:
          jj_consume_token(DIVID);
          expPotenc();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expMult");
    }
  }

  static final public void expPotenc() throws ParseException {
    trace_call("expPotenc");
    try {
      exptNot();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        jj_consume_token(POT);
        exptNot();
      }
    } finally {
      trace_return("expPotenc");
    }
  }

  static final public void exptNot() throws ParseException {
    trace_call("exptNot");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACAO:
        jj_consume_token(NEGACAO);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      expParent();
    } finally {
      trace_return("exptNot");
    }
  }

  static final public void expParent() throws ParseException {
    trace_call("expParent");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_E:
        jj_consume_token(PAR_E);
        exp();
        jj_consume_token(PAR_D);
        break;
      case IDENT:
        jj_consume_token(IDENT);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expParent");
    }
  }

  static final public void operador() throws ParseException {
    trace_call("operador");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        jj_consume_token(MAIS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIVID:
        jj_consume_token(DIVID);
        break;
      case POT:
        jj_consume_token(POT);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador");
    }
  }

  static final public void print() throws ParseException {
    trace_call("print");
    try {
      jj_consume_token(PRINT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case INTEGER:
      case NEGACAO:
      case PAR_E:
        exp();
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("print");
    }
  }

  static final public void read() throws ParseException {
    trace_call("read");
    try {
      jj_consume_token(READ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        jj_consume_token(46);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_TYPE:
      case INTEGER_TYPE:
        type();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(IDENT);
    } finally {
      trace_return("read");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x323e000,0x323e000,0x0,0x0,0x7000000,0x1000,0x7000000,0x0,0x323e000,0x323e000,0x323e000,0x80000,0x6000,0x0,0x0,0x0,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0x0,0x0,0x5000000,0xe0000000,0x7000000,0x2000000,0x6000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x800,0x800,0x1400,0x0,0x1400,0x800,0x0,0x0,0x0,0x0,0x0,0x200,0x100,0xfc,0xfc,0x0,0x0,0x1,0x1,0x2,0x400,0x1000,0x3,0x1400,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
