/*  Compilador.jj  -  Analisador Sintático */

options
{
  JDK_VERSION = "1.5";
  DEBUG_PARSER = true;
  DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)
import java.io.*;

public class Compilador
{
    static TabelaSimbolos tabela = new TabelaSimbolos();
  	static int quantidadeExemplos = 1;
  public static void main(String args []) throws ParseException
  {
    Compilador analisador = null;
    try {
      	analisador = new Compilador(new FileInputStream("codigos_exemplo/exemplo01.my"));
     
		for(int i = 1; i <= quantidadeExemplos; i++) {
		  	String nomeArquivo = "codigos_exemplo/exemplo0"+i+".my";
			tabela.limparTabela();
	     	System.out.println("Inicio Exemplo de codigo " + i);
	      	analisador.ReInit(new FileInputStream(nomeArquivo));
	 	 	analisador.inicio();
	      	System.out.println(" Fim Exemplo de codigo "+i+"\r\n");
	 	 	System.out.println(tabela.toString());
	    }
	    
  	}catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo nao encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro lexico" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sintatico" + e.getMessage());
    }
    catch (ErroSemanticoException e) {
		System.out.println(e.getMessage());
    }
    
  }

  public static void verificarTipo(char tipo, char conteudoVar, String nomeVar) throws ErroSemanticoException{
		if(tipo == 'S' && conteudoVar != 'S') {
			throw new ErroSemanticoException("Erro semantico -> Valor da variavel "+nomeVar+" deve ser uma String ");
		} else if(tipo == 'I' && conteudoVar != 'I') {
			throw new ErroSemanticoException("Erro semantico -> Valor da variavel "+nomeVar+" deve ser um Inteiro ");
		}
  }
}

PARSER_END(Compilador)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}


SKIP : {
   "/*" : comentariomult
}

<comentariomult> SKIP: {
   "*/" : DEFAULT |
   <~[]>
}

SKIP : {
   "//" : comentariosimples
}

<comentariosimples> SKIP: {
    <["\n","\r"]> : DEFAULT |
   <~[]>
}

TOKEN :
{
  < PT_VIRG : ";" >
| 
  < ATRIB : ":=" >
}

TOKEN :
{
  < STRING_TYPE : "String" >
| 
  < INTEGER_TYPE : "Integer" >
}

TOKEN :
{
  < READ : "read" >
| 
  < PRINT : "print" >
| 
  < IF : "if" >
| 
  < ENTAO : "entao" >
| 
  < ELSE : "else" >
| 
  < ENDIF : "endIf" >
| 
  < WHILE : "while" >
| 
  < DO : "do" >
| 
  < ENDWHILE : "endWhile" >
}

TOKEN :
{
  < IDENT :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < STRING : "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| 
  < INTEGER :
    (
      [ "0"-"9" ] ([ "0"-"9" ])*
    ) >
| 
  < #DIGIT : [ "0"-"9" ] >
| 
  < #LETTER : [ "A"-"Z", "a"-"z" ] >	
  //'#' indica que é um token privado, usado só na construção da AL
}

TOKEN :
{
  < MAIS : "+" >
| < MENOS : "-" >
| < MULT : "*" >
| < DIVID : "/" >
| < POT : "^" >
| < IGUAL : "==" >
| < MAIOR_IGUAL : ">=" >
| < MAIOR : ">" >
| < MENOR : "< " >
| < MENOR_IGUAL : "<=" >
| < DIFERENTE : "!=" >
| < SC_AND : "&&" >
| < SC_OR : "||" >
| < NEGACAO : "!" >
| < CONCAT : "#" >
| < PAR_E : "(" >
| < PAR_D : ")" >
}

void inicio() throws ErroSemanticoException:
{}
{
  (
    linhaComando()
  )*
  < EOF >
}

void linhaComando() throws ErroSemanticoException:
{}
{
  comando() < PT_VIRG >
}

void comando() throws ErroSemanticoException:
{}
{
  declararVar()
| reatribuirVar()
| print()
| read()
| concat()
| whileComando()
| ifComando()
}

void declararVar() throws ErroSemanticoException:
{Simbolo simb; Token t; char tipo; char conteudoVar; }
{
  //String teste; OU String teste := 'olá';
  //Integer teste; OU Integer teste := 10;
  //Integer soma := 1+2;
  
  	 ( < STRING_TYPE > {tipo = 'S';} | < INTEGER_TYPE > {tipo = 'I';} ) 

	  t=< IDENT >
	  {
	    simb = new Simbolo(t.image, tipo);
	    tabela.inclui(simb);
	    simb.setInicializada('n');
	  }
  (
    < ATRIB > /*se houver <ATRIB> variavel inicializada */ { simb.setInicializada('s'); }

    (
     < STRING > ( concatAtrib() )?
		{
		  conteudoVar = 'S';
		}
      |
      exp() ( concatAtrib() )?
	      {
			conteudoVar = 'I';
	      }
	)

	{
		verificarTipo(tipo, conteudoVar, t.image);
	}

	

  
  )?

   
}

void reatribuirVar() throws ErroSemanticoException:
{Simbolo s; Token t;}
{
	  t=< IDENT >
	  {
	   if(!tabela.isExiste(t.image)) {
			throw new ErroSemanticoException("Erro semantico -> Variavel " +t.image+ " nao foi declarada");
		} else {
			if(!tabela.foiInicializada(t.image)) {
				tabela.inicializarSimbolo(t.image);
			}
		}
	  }
 
    < ATRIB >
	
	 
    (
      < STRING >
      (
        concatAtrib()
      )?
    | exp()
      (
        concatAtrib()
      )?
    )
  
}


void concat() throws ErroSemanticoException:
{}
{
  < STRING > concatAtrib()
}

void concatAtrib() throws ErroSemanticoException:
{}
{
  (
    < CONCAT >
    (
      < STRING >
    | exp()
    )
  )+
}

void whileComando() throws ErroSemanticoException:
{}
{
  < WHILE > < PAR_E > exp() < PAR_D > < DO >
  (
    linhaComando()
  )*
  < ENDWHILE >
}

void ifComando() throws ErroSemanticoException:
{}
{
  < IF > < PAR_E > exp() < PAR_D > < ENTAO >
  (
    linhaComando()
  )*
  ( < ELSE >(linhaComando())* )?
  < ENDIF >
}

void type():
{}
{
  < STRING_TYPE >
| < INTEGER_TYPE >
}

void exp() throws ErroSemanticoException:
{ListaItem lista = new ListaItem();}
{
 expAux(lista)
 	{
 		System.out.println(lista.toString());
	}
}

void expAux(ListaItem lista) throws ErroSemanticoException: { Token t;}
{
  expAnd(lista)
  (
    t=< SC_OR > expAnd(lista)
      {
		lista.add(new Item('o',t.image));
      }
  )*
}

void expAnd(ListaItem lista) throws ErroSemanticoException:
{Token t;}
{
  expRelac(lista)
  (
    t=< SC_AND > expRelac(lista)
      {
		lista.add(new Item('o',t.image));
      }
  )*
}

void expRelac(ListaItem lista) throws ErroSemanticoException:
{Token t;}
{
  expAdt(lista)
  (
    t=< IGUAL > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  | 
    t=< DIFERENTE > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  | 
    t=< MAIOR_IGUAL > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  | 
    t=< MENOR_IGUAL > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  | 
    t=< MAIOR > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  | 
    t=< MENOR > expAdt(lista)
   { lista.add(new Item('o',t.image)); }
  )*
}

void expAdt(ListaItem lista) throws ErroSemanticoException:
{Token t;}
{
  expMult(lista)
  (
    t = < MAIS > expMult(lista)
   { lista.add(new Item('o',t.image)); }
    
  | 
    t = < MENOS > expMult(lista)
   { lista.add(new Item('o',t.image)); }
    
  )*
}

void expMult(ListaItem lista) throws ErroSemanticoException:
{Token t;}
{
  expPotenc(lista)
  (
   t = < MULT > expPotenc(lista)
   { lista.add(new Item('o',t.image)); }
    
  | 
   t = < DIVID > expPotenc(lista)
   { lista.add(new Item('o',t.image)); }
    
  )*
}

void expPotenc(ListaItem lista) throws ErroSemanticoException:
{Token t;}
{
  exptNot(lista)
  (
   t= < POT > exptNot(lista)   { lista.add(new Item('o',t.image)); }
    
  )*
}

void exptNot(ListaItem lista) throws ErroSemanticoException:
{int countNeg = 0;}
{
  (< NEGACAO > {countNeg++;})? expParent(lista) {
     if(countNeg > 0 && countNeg % 2 == 1) {
		 { lista.add(new Item('o',"!"));}
	 }
  }
}

void expParent(ListaItem lista) throws ErroSemanticoException:
{Token t; Item item;}
{
  < PAR_E > expAux(lista) < PAR_D >
| t=< IDENT >

	{
 		if(!tabela.isExiste(t.image))
        	throw new ErroSemanticoException("Erro semantico -> Variavel "+t.image+ " nao foi declarada");
        if(!tabela.foiInicializada(t.image)) 
          	throw new ErroSemanticoException("Erro semantico -> Variavel "+t.image+ " nao foi inicializada");
        if( tabela.getSimb(t.image).getTipo() == 'S' ) {
          	throw new ErroSemanticoException("Erro semantico -> Variavel "+t.image+ " deve ser do tipo Integer ");
		}

		item = new Item('v',t.image);
		lista.add(item);
	}

| t=< INTEGER >
	{
		item =new Item('n',t.image);
	  	lista.add(item);
	}
}

void operador() throws ErroSemanticoException:
{}
{
  < MAIS >
| < MENOS >
| < MULT >
| < DIVID >
| < POT >
}

void print() throws ErroSemanticoException:
{}
{
  < PRINT >
  ( exp()| < STRING > )
}

void read() :
{}
{
  < READ >
  (  <STRING> ",")?
  (type())?
  < IDENT >
}
